[[ program_entry ]]
main := proc() {
    fmt._fmt("this {10x} is {30c} a {4.3} test\n", 123, "this is a test", 1.23);
    sys.exit(0);
}

sys := module {
    [[ extern ]] open  := proc(path: str, oflag: s32): s32;
    [[ extern ]] read  := proc(fd: s32, bytes: str, len: u64): s32;
    [[ extern ]] write := proc(fd: s32, bytes: str, len: u64): s32;
    [[ extern ]] exit  := proc(code: s64);
}

util := module {
    slen := proc(s: str) : u64 {
        len := cast(u64, 0);

        loop i := 0; s[i] != cast(u8, 0); i += 1 { len += 1; }

        return len;
    }

    putc := proc(c: u8)  { sys.write(cast(s32, 1), cast(str, *c), cast(u64, 1)); }
    puts := proc(s: str) { sys.write(cast(s32, 1), s, slen(s));                  }
}

fmt := module {
    JUST_LEFT   := 0;
    JUST_RIGHT  := 1;
    JUST_CENTER := 2;

    HEX_LOWER   := 1;
    HEX_UPPER   := 2;


    [[ bitfield_struct(u64) ]]
    Format_Info := struct {
        [[ bitfield( 0, 31) ]] width:     u32,
        [[ bitfield(32, 33) ]] just:      u8,
        [[ bitfield(34, 35) ]] hex:       u8,
        [[ bitfield(36, 49) ]] float_int: u32,
        [[ bitfield(50, 63) ]] float_rat: u32,
    }


    to_formatted_str := proc(arg: %T, f: Format_Info): str {
        return "ARG";
    }

    _fmt := proc(fmt: str, args: %...) {
        len       := util.slen(fmt);
        which_arg := 0;

        loop i := 0; i < len; i += 1 {
            if fmt[i] == '{' {
                info: Format_Info;

                loop ; i < len and fmt[i] != '}'; i += 1 {
                    # parse formatting stuff
                }

                a := 0;
                \VARGS [
                    if a == which_arg {
                        s := to_formatted_str(_builtin_varg(), info);
                        util.puts(s);
                    }
                    a += 1;
                ]

                which_arg += 1;
            } else {
                util.putc(fmt[i]);
            }
        }
    }
}

formatters := module {
    [[ specialization(fmt.to_formatted_str) ]]
    to_formatted_str := proc(arg: s64, f: fmt.Format_Info): str {
        return "<s64>";
    }
}
