sys := module {
    [[ extern ]] open  := proc(path: str, oflag: s32): s32;
    [[ extern ]] read  := proc(fd: s32, bytes: str, len: u64): s32;
    [[ extern ]] write := proc(fd: s32, bytes: str, len: u64): s32;
    write := proc(fd: s32, bytes: str, len: u64): s32 {
        return _builtin_syscall(SYS_WRITE, fd, bytes, len);
    }
}

util := module {
    slen := proc(s: str) : u64 {
        len := cast(u64, 0);

        loop i := 0; s[i] != cast(u8, 0) ; i += 1 { len += 1; }

        return len;
    }

    puts := proc(s: str) {
        sys.write(cast(s32, 1), s, slen(s));
    }
}

Config := module {
    repetitions := 10;
}

[[ program_entry ]]
hello := proc() {
    loop i := 0; i < Config.repetitions; i += 1 {
        util.puts("hello, world\n");
    }
}
