square = proc (x, %_ = type(x)) { x * x }

try_square = proc () {
    square(1)
    square(1.23)

    square(8, string) ; Hmmm... would probably make a new polymorph, but wouldn't be an error.

    square(8, f32)    ; This would be an error because square modded on f32 was already used
                      ; where x was an f32. But now, you're trying to use it where x is an i32,
                      ; so you have conflicting uses.
}

array = module {
    Array = struct {
        %data_type,
        data_ptr,
        used,
        capacity
    }

    make = proc (%T) {
        return Array(
            data_type = T,
            data_ptr  = mem_alloc(8 * sizeof(T)),
            used      = 0,
            capacity  = 8
        )
    }

    _grow = proc (a, %_ = a.data_type) {
        a.capacity *= 2
        a.data_ptr  = mem_realloc(a.data_ptr, a.capacity)
    }

    push = proc (a, item, %_ = a.data_type) {
        if a.used == a.capacity { _grow(a) }
        a.data_ptr[a.used] = item
        a.used += 1
    }

    item = proc (a, idx, %_ = a.data_type) {
        return a.data_ptr[idx]
    }

    free = proc (a, %_ = a.data_type) {
        mem_free(a.data_ptr)
    }
} ; module array

foo = proc () {
    my_array = array.make(f32)
        defer { array.free(my_array) }
    array.push(my_array, 1.23)
    one_two_three = array.item(my_array, 0)

    ; [[ example_decl_modifier(thinger) ]]
    squared = macro (x) { ($(x)*$(x)) }
    one_quarter = squared(0.5)
}

; [[ macro_arg_is_expression(container) ]]
; [[ macro_arg_is_identifier(iter_name) ]]
foreach = macro (iter_name, container) {
    for ( $(iter_name)  = $(container)
        : $(iter_name) != $(container).iter_end()
        : $(iter_name)  = $(container).iter_next($(iter_name)))
}

_print = proc (fmt, ...) {
    arg_strings = array.make(str)
        defer { array.free(arg_strings) }

    #forvarg a { array.push(arg_strings, to_str(a)) }

    i = 0
    foreach(c, iter(fmt)) {
        if c == '%' && i < array.len(arg_strings) {
            write(1, str.c_style(*array.item(arg_strings, i)))
            i += 1
        } else {
            write(1, &c, 1)
        }
    }
}

; [[ macro_arg_is_expression(map_fn) ]]
; [[ macro_arg_is_proc(map_fn)       ]]
map_args = macro(map_fn, ...) {
    #forvarg a { $(map_fn)(a), }
}

; [[ macro_arg_is_string_literal(fmt) ]]
print = macro (fmt, ...) {
    _print($(fmt), map_args(to_any, $(...)))
}

[[ program_entry ]]
main = proc () {
    keywords = array.make(str)
        defer { array.free(keywords) }
    array.push(keywords, "if")
    array.push(keywords, "int")
    array.push(keywords, "return")

    foreach(kwd, keywords) { print("%\n", kwd) }
}
