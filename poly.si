Map :: struct(%K: type, %V: type) {
    k: K,
    v: V,
}

insert :: proc(map: *Map(%K, %V), key: K, val: V) {

}

iterate :: module {
    next     :: proc(iter: *%T)              { \ERROR "T does not implement next()"     }
    is_end   :: proc(iter: *%T): s64         { \ERROR "T does not implement is_end()"   }
    val_type :: proc(%T: type): type         { \ERROR "T does not implement val_type()" }
    val      :: proc(iter: *%T): val_type(T) { \ERROR "T does not implement val()"      }
}

Range_Iter :: struct {
    start: s64,
    end  : s64,
    step : s64,
}

range_iter_create :: proc(start: s64, end: s64): Range_Iter {
    iter: Range_Iter;

    iter.start = start;
    iter.end   = end;
    iter.step  = 1;
}

range :: range_iter_create;

range_iter_next :: proc(iter: *Range_Iter) {
    iter.start += iter.step;
    return iter;
}

range_iter_is_end :: proc(iter: *Range_Iter): s64 {
    return iter.start == iter.end;
}

# iter :: macro(iterator) {
#     loop i := iterator; iterate.is_end(*i); iterate.next(*i); {
#         it := iterate.val(i);
#         __MACRO_BODY__
#     }
# }

# [[ program_entry ]]
# main :: proc() {
#     iter![range(0, 10)] {
#         pfmt!("{}\n", it);
#     }
# }
