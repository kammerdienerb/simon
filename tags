!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN	src/internal.h	/^#define ALIGN(/;"	d
ALIGN	src/internal.h	/^#undef ALIGN$/;"	d
ALIGNMENT	src/memory.h	/^#define ALIGNMENT /;"	d
ARRAY_DEFAULT_CAP	src/array.h	/^#define ARRAY_DEFAULT_CAP /;"	d
ASSERT	src/internal.h	/^#define ASSERT(/;"	d
ASSIGNMENT_PREC	src/parse.c	/^#define ASSIGNMENT_PREC /;"	d	file:
ASTP	src/ast.h	/^#define ASTP(/;"	d
AST_ALLOC	src/parse.c	/^#define AST_ALLOC(/;"	d	file:
AST_DEFINE	src/ast.h	/^#define AST_DEFINE(/;"	d
AST_FLAG_CHECKED	src/ast.h	/^#define AST_FLAG_CHECKED /;"	d
AST_FLAG_ORIGIN	src/ast.h	/^#define AST_FLAG_ORIGIN /;"	d
AST_FLAG_POLYMORPH	src/ast.h	/^#define AST_FLAG_POLYMORPH /;"	d
AST_FLAG_VARARGS	src/ast.h	/^#define AST_FLAG_VARARGS /;"	d
AST_STR	src/ast.h	/^#define AST_STR(/;"	d
C	src/ui.c	/^#define C(/;"	d	file:
CAT2	src/hash_table.h	/^#define CAT2(/;"	d
CAT2	src/tree.h	/^#define CAT2(/;"	d
CAT3	src/hash_table.h	/^#define CAT3(/;"	d
CAT3	src/tree.h	/^#define CAT3(/;"	d
CAT4	src/hash_table.h	/^#define CAT4(/;"	d
CAT4	src/tree.h	/^#define CAT4(/;"	d
DEFAULT_BLOCK_SIZE	src/memory.h	/^#define DEFAULT_BLOCK_SIZE /;"	d
DEFAULT_START_SIZE_IDX	src/hash_table.h	/^#define DEFAULT_START_SIZE_IDX /;"	d
ERR	src/internal.h	/^#define ERR(/;"	d
ERR_COLOR	src/ui.c	/^#define ERR_COLOR /;"	d	file:
EXPECT	src/parse.c	/^#define EXPECT(/;"	d	file:
EXPECT_CHAR	src/parse.c	/^#define EXPECT_CHAR(/;"	d	file:
EXPECT_IDENT	src/parse.c	/^#define EXPECT_IDENT(/;"	d	file:
EXPECT_INT	src/parse.c	/^#define EXPECT_INT(/;"	d	file:
EXPECT_LIT	src/parse.c	/^#define EXPECT_LIT(/;"	d	file:
EXPECT_STR_LIT	src/parse.c	/^#define EXPECT_STR_LIT(/;"	d	file:
EXPECT_WORD	src/parse.c	/^#define EXPECT_WORD(/;"	d	file:
FILE_ERR_DIR	src/file.h	/^#define FILE_ERR_DIR /;"	d
FILE_ERR_MAP	src/file.h	/^#define FILE_ERR_MAP /;"	d
FILE_ERR_NOF	src/file.h	/^#define FILE_ERR_NOF /;"	d
FILE_ERR_PER	src/file.h	/^#define FILE_ERR_PER /;"	d
FILE_ERR_UNK	src/file.h	/^#define FILE_ERR_UNK /;"	d
FILE_NO_ERR	src/file.h	/^#define FILE_NO_ERR /;"	d
GB	src/internal.h	/^#define GB(/;"	d
GET_BEG_POINT	src/parse.c	/^#define GET_BEG_POINT(/;"	d	file:
GET_END_POINT	src/parse.c	/^#define GET_END_POINT(/;"	d	file:
GS_LOCK	src/globals.h	/^#define GS_LOCK(/;"	d
GS_UNLOCK	src/globals.h	/^#define GS_UNLOCK(/;"	d
HIGHEST_BIN_PREC	src/parse.c	/^#define HIGHEST_BIN_PREC /;"	d	file:
ID_TO_S	src/strings.c	/^#define ID_TO_S(/;"	d	file:
INFO_COLOR	src/ui.c	/^#define INFO_COLOR /;"	d	file:
INSTALL_IF_NEW	src/parse.c	/^#define INSTALL_IF_NEW(/;"	d	file:
INTERNAL_ERROR	src/internal.h	/^#define INTERNAL_ERROR(/;"	d
IS_ALIGNED	src/internal.h	/^#define IS_ALIGNED(/;"	d
IS_ALPHA	src/parse.c	/^#define IS_ALPHA(/;"	d	file:
IS_IDENT_CHAR	src/parse.c	/^#define IS_IDENT_CHAR(/;"	d	file:
IS_IN_RANGE	src/parse.c	/^#define IS_IN_RANGE(/;"	d	file:
IS_NUM	src/parse.c	/^#define IS_NUM(/;"	d	file:
IS_POWER_OF_TWO	src/internal.h	/^#define IS_POWER_OF_TWO(/;"	d
IS_SPACE	src/parse.c	/^#define IS_SPACE(/;"	d	file:
KB	src/internal.h	/^#define KB(/;"	d
LIMIT	src/internal.h	/^#define LIMIT(/;"	d
LINES_LOCK	src/globals.h	/^#define LINES_LOCK(/;"	d
LINES_UNLOCK	src/globals.h	/^#define LINES_UNLOCK(/;"	d
LOCK_OUTPUT	src/ui.c	/^#define LOCK_OUTPUT(/;"	d	file:
MAX	src/internal.h	/^#define MAX(/;"	d
MAX	src/internal.h	/^#undef MAX$/;"	d
MAX_BUMP_ALLOC_SIZE	src/memory.h	/^#define MAX_BUMP_ALLOC_SIZE /;"	d
MAX_NUM_TLS	src/tls.h	/^#define MAX_NUM_TLS /;"	d
MB	src/internal.h	/^#define MB(/;"	d
MIN	src/internal.h	/^#define MIN(/;"	d
MIN	src/internal.h	/^#undef MIN$/;"	d
N_CONTEXT_LINES	src/ui.c	/^#define N_CONTEXT_LINES /;"	d	file:
N_OPS	src/parse.c	/^    N_OPS,$/;"	e	enum:__anon10	file:
OPTIONAL	src/parse.c	/^#define OPTIONAL(/;"	d	file:
OPTIONAL_CHAR	src/parse.c	/^#define OPTIONAL_CHAR(/;"	d	file:
OPTIONAL_IDENT	src/parse.c	/^#define OPTIONAL_IDENT(/;"	d	file:
OPTIONAL_INT	src/parse.c	/^#define OPTIONAL_INT(/;"	d	file:
OPTIONAL_LIT	src/parse.c	/^#define OPTIONAL_LIT(/;"	d	file:
OPTIONAL_NO_CLEAN	src/parse.c	/^#define OPTIONAL_NO_CLEAN(/;"	d	file:
OPTIONAL_NO_CLEAN_OR_EAT	src/parse.c	/^#define OPTIONAL_NO_CLEAN_OR_EAT(/;"	d	file:
OPTIONAL_NO_EAT	src/parse.c	/^#define OPTIONAL_NO_EAT(/;"	d	file:
OPTIONAL_NO_EAT_CHAR	src/parse.c	/^#define OPTIONAL_NO_EAT_CHAR(/;"	d	file:
OPTIONAL_NO_EAT_IDENT_ASSIGN	src/parse.c	/^#define OPTIONAL_NO_EAT_IDENT_ASSIGN(/;"	d	file:
OPTIONAL_NO_EAT_LIT	src/parse.c	/^#define OPTIONAL_NO_EAT_LIT(/;"	d	file:
OPTIONAL_NO_EAT_WORD	src/parse.c	/^#define OPTIONAL_NO_EAT_WORD(/;"	d	file:
OPTIONAL_STR_LIT	src/parse.c	/^#define OPTIONAL_STR_LIT(/;"	d	file:
OPTIONAL_WORD	src/parse.c	/^#define OPTIONAL_WORD(/;"	d	file:
OP_ASSOC	src/parse.c	/^#define OP_ASSOC(/;"	d	file:
OP_ASSOC_LEFT	src/parse.c	/^#define OP_ASSOC_LEFT /;"	d	file:
OP_ASSOC_RIGHT	src/parse.c	/^#define OP_ASSOC_RIGHT /;"	d	file:
OP_IS_BINARY	src/parse.c	/^#define OP_IS_BINARY(/;"	d	file:
OP_IS_UNARY	src/parse.c	/^#define OP_IS_UNARY(/;"	d	file:
OP_PREC	src/parse.c	/^#define OP_PREC(/;"	d	file:
OP_STR	src/parse.c	/^#define OP_STR(/;"	d	file:
OP_STRLEN	src/parse.c	/^#define OP_STRLEN(/;"	d	file:
PAGE_SZ	src/memory.h	/^#define PAGE_SZ /;"	d
PROGRAM_ENTRY_LOCK	src/globals.h	/^#define PROGRAM_ENTRY_LOCK(/;"	d
PROGRAM_ENTRY_UNLOCK	src/globals.h	/^#define PROGRAM_ENTRY_UNLOCK(/;"	d
RANGE_COLOR	src/ui.c	/^#define RANGE_COLOR /;"	d	file:
RLOCK	src/strings.c	/^#define RLOCK(/;"	d	file:
ROOTS_LOCK	src/globals.h	/^#define ROOTS_LOCK(/;"	d
ROOTS_UNLOCK	src/globals.h	/^#define ROOTS_UNLOCK(/;"	d
SCOPE	src/parse.c	/^#define SCOPE(/;"	d	file:
SCOPE_NAME_BUFF_SIZE	src/scope.h	/^#define SCOPE_NAME_BUFF_SIZE /;"	d
SCOPE_POP	src/parse.c	/^#define SCOPE_POP(/;"	d	file:
SCOPE_PUSH	src/parse.c	/^#define SCOPE_PUSH(/;"	d	file:
SCOPE_PUSH_NAMED	src/parse.c	/^#define SCOPE_PUSH_NAMED(/;"	d	file:
SINT	src/internal.h	/^#define SINT(/;"	d
STR	src/hash_table.h	/^#define STR(/;"	d
STR	src/tree.h	/^#define STR(/;"	d
STRING_HASH_TABLE	src/strings.h	/^#define STRING_HASH_TABLE /;"	d
STRING_ID_NULL	src/strings.h	/^#define STRING_ID_NULL /;"	d
STRING_INTERN_STRUCTURE	src/strings.h	/^#define STRING_INTERN_STRUCTURE /;"	d
STRING_RB_TREE	src/strings.h	/^#define STRING_RB_TREE /;"	d
S_TO_ID	src/strings.c	/^#define S_TO_ID(/;"	d	file:
TB	src/internal.h	/^#define TB(/;"	d
TERM_BLUE	src/ui.c	/^#define TERM_BLUE /;"	d	file:
TERM_CYAN	src/ui.c	/^#define TERM_CYAN /;"	d	file:
TERM_GREEN	src/ui.c	/^#define TERM_GREEN /;"	d	file:
TERM_MAGENTA	src/ui.c	/^#define TERM_MAGENTA /;"	d	file:
TERM_RED	src/ui.c	/^#define TERM_RED /;"	d	file:
TERM_RESET	src/ui.c	/^#define TERM_RESET /;"	d	file:
TERM_YELLOW	src/ui.c	/^#define TERM_YELLOW /;"	d	file:
THREADPOOL_IMPLEMENTATION	src/threadpool.c	/^#define THREADPOOL_IMPLEMENTATION$/;"	d	file:
TLS_METHOD	src/tls.h	/^#define TLS_METHOD /;"	d
TLS_PER_HW_THREAD	src/tls.h	/^#define TLS_PER_HW_THREAD /;"	d
TLS_PER_OS_THREAD	src/tls.h	/^#define TLS_PER_OS_THREAD /;"	d
TP_DONT_STOP	src/threadpool.h	/^#define TP_DONT_STOP /;"	d
TP_GRACEFUL	src/threadpool.h	/^#define TP_GRACEFUL /;"	d
TP_IMMEDIATE	src/threadpool.h	/^#define TP_IMMEDIATE /;"	d
TREE_FREE_FN	src/tree.h	/^#define TREE_FREE_FN /;"	d
TREE_MALLOC_FN	src/tree.h	/^#define TREE_MALLOC_FN /;"	d
TYPE_STRING_BUFF_SIZE	src/type.c	/^#define TYPE_STRING_BUFF_SIZE /;"	d	file:
TY_NONE	src/type.h	/^#define TY_NONE /;"	d
UINT	src/internal.h	/^#define UINT(/;"	d
UNLOCK	src/strings.c	/^#define UNLOCK(/;"	d	file:
UNLOCK_OUTPUT	src/ui.c	/^#define UNLOCK_OUTPUT(/;"	d	file:
WLOCK	src/strings.c	/^#define WLOCK(/;"	d	file:
X	src/ast.c	/^#define X(/;"	d	file:
X	src/ast.c	/^#undef X$/;"	d	file:
X	src/ast.h	/^#define X(/;"	d
X	src/ast.h	/^#undef X$/;"	d
X	src/parse.c	/^#define X(/;"	d	file:
X	src/parse.c	/^#undef X$/;"	d	file:
X	src/type.c	/^#define X(/;"	d	file:
X	src/type.c	/^#undef X$/;"	d	file:
X	src/type.h	/^#define X(/;"	d
X	src/type.h	/^#undef X$/;"	d
XSTR	src/internal.h	/^#define XSTR(/;"	d
X_AST	src/ast.h	/^#define X_AST /;"	d
X_AST	src/ast.h	/^X_AST$/;"	e	enum:__anon2
X_AST_ASSIGNS	src/ast.h	/^#define X_AST_ASSIGNS /;"	d
X_CT_TYPES	src/type.h	/^#define X_CT_TYPES /;"	d
X_HAVE_UNDER_TYPES	src/type.h	/^#define X_HAVE_UNDER_TYPES /;"	d
X_OPS	src/parse.c	/^    X_OPS$/;"	e	enum:__anon10	file:
X_OPS	src/parse.c	/^#define X_OPS /;"	d	file:
X_REAL_BUILTIN_TYPES	src/type.h	/^#define X_REAL_BUILTIN_TYPES /;"	d
X_TYPES	src/type.h	/^    X_TYPES$/;"	e	enum:__anon17
X_TYPES	src/type.h	/^#define X_TYPES /;"	d
_CAT2	src/hash_table.h	/^#define _CAT2(/;"	d
_CAT2	src/tree.h	/^#define _CAT2(/;"	d
_CAT3	src/hash_table.h	/^#define _CAT3(/;"	d
_CAT3	src/tree.h	/^#define _CAT3(/;"	d
_CAT4	src/hash_table.h	/^#define _CAT4(/;"	d
_CAT4	src/tree.h	/^#define _CAT4(/;"	d
_HASH_TABLE_EQU	src/hash_table.h	/^#define _HASH_TABLE_EQU(/;"	d
_HASH_TABLE_H_	src/hash_table.h	/^#define _HASH_TABLE_H_$/;"	d
_OPTIONAL_COMMON	src/parse.c	/^#define _OPTIONAL_COMMON(/;"	d	file:
_STR	src/hash_table.h	/^#define _STR(/;"	d
_STR	src/tree.h	/^#define _STR(/;"	d
_TI_FROM_TN	src/tree.h	/^#define _TI_FROM_TN(/;"	d
_TN_IS_RED	src/tree.h	/^#define _TN_IS_RED(/;"	d
_TREE_H_	src/tree.h	/^#define _TREE_H_$/;"	d
_XSTR	src/internal.h	/^#define _XSTR(/;"	d
__64	src/type.h	/^        u64       __64;$/;"	m	union:type::__anon18
__ARRAY_H__	src/array.h	/^#define __ARRAY_H__$/;"	d
__AST_H__	src/ast.h	/^#define __AST_H__$/;"	d
__FILE_H__	src/file.h	/^#define __FILE_H__$/;"	d
__GLOBALS_H__	src/globals.h	/^#define __GLOBALS_H__$/;"	d
__HASH_UTILITIES_H__	src/hash_utilities.h	/^#define __HASH_UTILITIES_H__$/;"	d
__INTERNAL_H__	src/internal.h	/^#define __INTERNAL_H__$/;"	d
__MEMORY_H__	src/memory.h	/^#define __MEMORY_H__$/;"	d
__OPTIONS_H__	src/options.h	/^#define __OPTIONS_H__$/;"	d
__PARSE_H__	src/parse.h	/^#define __PARSE_H__$/;"	d
__PLATFORM_H__	src/platform.h	/^#define __PLATFORM_H__$/;"	d
__SCOPE_H__	src/scope.h	/^#define __SCOPE_H__$/;"	d
__SOURCE_LOCATION_H__	src/src_range.h	/^#define __SOURCE_LOCATION_H__$/;"	d
__STRINGS_H__	src/strings.h	/^#define __STRINGS_H__$/;"	d
__THREADPOOL_H__	src/threadpool.h	/^#define __THREADPOOL_H__$/;"	d
__TLS_H__	src/tls.h	/^#define __TLS_H__$/;"	d
__TYPE_H__	src/type.h	/^#define __TYPE_H__$/;"	d
__UI_H__	src/ui.h	/^#define __UI_H__$/;"	d
_array_copy	src/array.c	/^void _array_copy(array_t *dst, array_t *src) {$/;"	f
_array_delete	src/array.c	/^void _array_delete(array_t *array, int idx) {$/;"	f
_array_free	src/array.c	/^void _array_free(array_t *array) {$/;"	f
_array_grow_if_needed	src/array.c	/^void _array_grow_if_needed(array_t *array) {$/;"	f
_array_grow_if_needed_to	src/array.c	/^void _array_grow_if_needed_to(array_t *array, int new_cap) {$/;"	f
_array_insert	src/array.c	/^void * _array_insert(array_t *array, int idx, void *elem) {$/;"	f
_array_make	src/array.c	/^array_t _array_make(int elem_size) {$/;"	f
_array_make_with_cap	src/array.c	/^array_t _array_make_with_cap(int elem_size, int initial_cap) {$/;"	f
_array_next_elem	src/array.c	/^void * _array_next_elem(array_t *array) {$/;"	f
_array_push	src/array.c	/^void * _array_push(array_t *array, void *elem) {$/;"	f
_array_push_n	src/array.c	/^void * _array_push_n(array_t *array, void *elems, int n) {$/;"	f
_array_zero_term	src/array.c	/^void _array_zero_term(array_t *array) {$/;"	f
_hash_table	src/hash_table.h	/^#define _hash_table(/;"	d
_hash_table_slot	src/hash_table.h	/^#define _hash_table_slot(/;"	d
_report_loc_err	src/ui.c	/^void _report_loc_err(int should_exit, src_point_t pt, const char *fmt, ...) {$/;"	f
_report_loc_info	src/ui.c	/^void _report_loc_info(int should_exit, src_point_t pt, const char *fmt, ...) {$/;"	f
_report_range_err	src/ui.c	/^void _report_range_err(int should_exit, src_range_t *range, const char *fmt, ...) {$/;"	f
_report_range_info	src/ui.c	/^void _report_range_info(int should_exit, src_range_t *range, const char *fmt, ...) {$/;"	f
_show_scope	src/scope.c	/^void _show_scope(scope_t *scope, int level) {$/;"	f
_tp_thread_task	src/threadpool.h	/^static void _tp_thread_task(void *_tp) {$/;"	f
_tree	src/tree.h	/^#define _tree(/;"	d
_tree_it	src/tree.h	/^#define _tree_it(/;"	d
_tree_node	src/tree.h	/^#define _tree_node(/;"	d
add_file_readonly	src/file.c	/^file_t * add_file_readonly(string_id path_id) {$/;"	f
add_file_rw	src/file.c	/^file_t * add_file_rw(string_id path_id) {$/;"	f
add_named_subscope	src/scope.c	/^scope_t *add_named_subscope(scope_t *scope, int kind, ast_t *node, string_id name_id) {$/;"	f
add_subscope	src/scope.c	/^scope_t *add_subscope(scope_t *scope, int kind, ast_t *node) {$/;"	f
add_symbol_if_new	src/scope.c	/^void add_symbol_if_new(scope_t *scope, string_id name_id, ast_t *node) {$/;"	f
arg	src/threadpool.h	/^    void           *arg;$/;"	m	struct:tp_task
arg_t	src/ast.h	/^} arg_t;$/;"	t	typeref:struct:__anon4
array_clear	src/array.h	/^#define array_clear(/;"	d
array_copy	src/array.h	/^#define array_copy(/;"	d
array_data	src/array.h	/^#define array_data(/;"	d
array_delete	src/array.h	/^#define array_delete(/;"	d
array_free	src/array.h	/^#define array_free(/;"	d
array_grow_if_needed	src/array.h	/^#define array_grow_if_needed(/;"	d
array_insert	src/array.h	/^#define array_insert(/;"	d
array_item	src/array.h	/^#define array_item(/;"	d
array_last	src/array.h	/^#define array_last(/;"	d
array_len	src/array.h	/^#define array_len(/;"	d
array_make	src/array.h	/^#define array_make(/;"	d
array_make_with_cap	src/array.h	/^#define array_make_with_cap(/;"	d
array_next_elem	src/array.h	/^#define array_next_elem(/;"	d
array_pop	src/array.h	/^#define array_pop(/;"	d
array_push	src/array.h	/^#define array_push(/;"	d
array_push_n	src/array.h	/^#define array_push_n(/;"	d
array_rtraverse	src/array.h	/^#define array_rtraverse(/;"	d
array_t	src/array.h	/^} array_t;$/;"	t	typeref:struct:__anon1
array_traverse	src/array.h	/^#define array_traverse(/;"	d
array_traverse_from	src/array.h	/^#define array_traverse_from(/;"	d
array_zero_term	src/array.h	/^#define array_zero_term(/;"	d
ast_get_kind_str	src/ast.c	/^const char *ast_get_kind_str(int kind) {$/;"	f
ast_kind_can_be_symbol_origin	src/ast.c	/^int ast_kind_can_be_symbol_origin(int kind) {$/;"	f
ast_kind_is_assign	src/ast.c	/^int ast_kind_is_assign(int kind) {$/;"	f
ast_kind_to_name	src/ast.c	/^static const char *ast_kind_to_name[] = {$/;"	v	file:
ast_t	src/ast.h	/^} ast_t;$/;"	t	typeref:struct:__anon3
base	src/memory.h	/^    void                    *base;$/;"	m	struct:bump_alloc_block
beg	src/src_range.h	/^    src_point_t beg;$/;"	m	struct:__anon12
break	src/ast.h	/^AST_DEFINE(break);$/;"	v
buff	src/file.h	/^    char      *buff;$/;"	m	struct:__anon5
buff_ptr	src/src_range.h	/^    char      *buff_ptr;$/;"	m	struct:__anon11
build_type_string	src/type.c	/^static void build_type_string(u32 ty, char *buff) {$/;"	f	file:
bump_alloc	src/memory.c	/^void * bump_alloc(bump_alloc_t *ba, u64 size)   { return mem_alloc(size);        }$/;"	f
bump_alloc	src/memory.c	/^void *bump_alloc(bump_alloc_t *ba, u64 size) {$/;"	f
bump_alloc	src/tls.h	/^    bump_alloc_t bump_alloc;$/;"	m	struct:__anon15
bump_alloc_block	src/memory.h	/^typedef struct bump_alloc_block {$/;"	s
bump_alloc_block_t	src/memory.h	/^} bump_alloc_block_t;$/;"	t	typeref:struct:bump_alloc_block
bump_alloc_make	src/memory.c	/^void   bump_alloc_make(bump_alloc_t *ba)        {                                }$/;"	f
bump_alloc_make	src/memory.c	/^void bump_alloc_make(bump_alloc_t *ba) {$/;"	f
bump_alloc_make_block	src/memory.c	/^static bump_alloc_block_t * bump_alloc_make_block(void) {$/;"	f	file:
bump_alloc_t	src/memory.h	/^} bump_alloc_t;$/;"	t	typeref:struct:__anon7
bump_big_alloc	src/memory.c	/^static void * bump_big_alloc(bump_alloc_t *ba, u64 size) {$/;"	f	file:
calloc	src/memory.h	/^#define calloc /;"	d
capacity	src/array.h	/^    int   capacity;$/;"	m	struct:__anon1
check_assign	src/ast.c	/^static void check_assign(ast_assign_t *assign, scope_t *scope) {$/;"	f	file:
check_bin_expr	src/ast.c	/^static void check_bin_expr(ast_bin_expr_t *expr, scope_t *scope) {$/;"	f	file:
check_ident	src/ast.c	/^static void check_ident(ast_ident_t *ident, scope_t *scope) {$/;"	f	file:
check_int	src/ast.c	/^static void check_int(ast_int_t *integer, scope_t *scope) {$/;"	f	file:
check_node	src/ast.c	/^void check_node(ast_t *node, scope_t *scope, ast_assign_t *parent_assign) {$/;"	f
check_proc	src/ast.c	/^static void check_proc(ast_proc_t *proc, scope_t *scope) {$/;"	f	file:
check_proc_param	src/ast.c	/^static void check_proc_param(ast_proc_param_t *param, scope_t *scope) {$/;"	f	file:
check_struct	src/ast.c	/^static void check_struct(ast_struct_t *st, scope_t *scope, ast_assign_t *parent_assign) {$/;"	f	file:
checked_open_FILE	src/file.c	/^int checked_open_FILE(const char *path, const char *mode, FILE **f, u64 *file_size) {$/;"	f
clean	src/parse.c	/^static int clean(parse_context_t *cxt, int passalong_len) {$/;"	f	file:
col	src/src_range.h	/^    u32        col;$/;"	m	struct:__anon11
common_exit	src/ui.c	/^static void common_exit(int status) {$/;"	f	file:
cond	src/threadpool.h	/^    pthread_cond_t   cond;$/;"	m	struct:__anon14
consume_comment	src/parse.c	/^static void consume_comment(parse_context_t *cxt) {$/;"	f	file:
consume_to_eol	src/parse.c	/^static void consume_to_eol(parse_context_t *cxt) {$/;"	f	file:
continue	src/ast.h	/^AST_DEFINE(continue);$/;"	v
copy_file_into_memory	src/file.c	/^int copy_file_into_memory(const char *path, file_t *file) {$/;"	f
create_named_scope	src/scope.c	/^scope_t create_named_scope(scope_t *parent, int kind, ast_t *node, string_id name_id) {$/;"	f
create_scope	src/scope.c	/^scope_t create_scope(scope_t *parent, int kind, ast_t *node) {$/;"	f
cstr_dup	src/strings.c	/^static char *cstr_dup(const char *str) {$/;"	f	file:
cur_point	src/parse.c	/^    src_point_t   cur_point;$/;"	m	struct:__anon9	file:
cursor	src/memory.h	/^    void                    *cursor;$/;"	m	struct:bump_alloc_block
cursor	src/parse.c	/^    char         *cursor;$/;"	m	struct:__anon9	file:
data	src/array.h	/^    void *data;$/;"	m	struct:__anon1
dec_tls_entry_ref	src/tls.c	/^static void dec_tls_entry_ref(void *_tls_entry) {$/;"	f	file:
do_check	src/simon.c	/^void do_check(void) {$/;"	f
do_init	src/simon.c	/^void do_init(void) {$/;"	f
do_options	src/simon.c	/^int do_options(int argc, char **argv) {$/;"	f
do_parse	src/simon.c	/^void do_parse(void) {$/;"	f
do_resolve_symbols	src/simon.c	/^void do_resolve_symbols(void) {$/;"	f
dump_symbols	src/options.h	/^    int         dump_symbols;$/;"	m	struct:__anon8
eat	src/parse.c	/^static int eat(parse_context_t *cxt, int len) {$/;"	f	file:
elem_size	src/array.h	/^    int   elem_size;$/;"	m	struct:__anon1
empty_t	src/internal.h	/^typedef struct {} empty_t;$/;"	t	typeref:struct:__anon6
end	src/file.h	/^    char      *end;$/;"	m	struct:__anon5
end	src/memory.h	/^    void                    *end;$/;"	m	struct:bump_alloc_block
end	src/parse.c	/^    char         *end;$/;"	m	struct:__anon9	file:
end	src/src_range.h	/^    src_point_t end;$/;"	m	struct:__anon12
expr	src/ast.h	/^    ast_t     *expr;$/;"	m	struct:__anon4
file	src/parse.c	/^    file_t       *file;$/;"	m	struct:__anon9	file:
file_t	src/file.h	/^} file_t;$/;"	t	typeref:struct:__anon5
find_in_scope	src/scope.c	/^ast_t *find_in_scope(scope_t *scope, string_id name_id) {$/;"	f
find_tls_entry	src/tls.c	/^static tls_entry_t * find_tls_entry(void) {$/;"	f	file:
flags	src/ast.h	/^    u8          flags;$/;"	m	struct:__anon3
flags	src/type.h	/^    u32 flags;$/;"	m	struct:type
fn	src/threadpool.h	/^    tp_task_fn_t    fn;$/;"	m	struct:tp_task
free	src/memory.h	/^#define free /;"	d
free_buff	src/file.h	/^    int        free_buff;$/;"	m	struct:__anon5
free_scope_no_recurse	src/scope.c	/^void free_scope_no_recurse(scope_t *scope) {$/;"	f
get_file	src/file.c	/^file_t * get_file(string_id path_id) {$/;"	f
get_next_thread_idx	src/tls.c	/^static u32 get_next_thread_idx(void) {$/;"	f	file:
get_or_insert_type	src/type.c	/^static u32 get_or_insert_type(type_t t) {$/;"	f	file:
get_ptr_type	src/type.c	/^u32 get_ptr_type(u32 ty, u32 flags) {$/;"	f
get_string	src/strings.c	/^const char *get_string(string_id id) {$/;"	f
get_string_id	src/strings.c	/^string_id get_string_id(const char *string) {$/;"	f
get_string_id_n	src/strings.c	/^string_id get_string_id_n(const char *string, u64 len) {$/;"	f
get_struct_type	src/type.c	/^u32 get_struct_type(ast_struct_t *st, string_id name_id, scope_t *scope, u32 flags) {$/;"	f
get_subscope_from_node	src/scope.c	/^scope_t *get_subscope_from_node(scope_t *scope, ast_t *node) {$/;"	f
get_tls	src/tls.c	/^tls_t * get_tls(void) {$/;"	f
get_type_string_id	src/type.c	/^string_id get_type_string_id(u32 ty) {$/;"	f
get_type_structure	src/type.c	/^static type_t * get_type_structure(u32 ty) {$/;"	f	file:
global_scope	src/globals.c	/^scope_t          global_scope;$/;"	v
global_scope	src/parse.c	/^    scope_t       global_scope;$/;"	m	struct:__anon9	file:
global_scope_mtx	src/globals.c	/^pthread_mutex_t  global_scope_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
hash_table	src/hash_table.h	/^#define hash_table(/;"	d
hash_table_delete	src/hash_table.h	/^#define hash_table_delete(/;"	d
hash_table_free	src/hash_table.h	/^#define hash_table_free(/;"	d
hash_table_get_key	src/hash_table.h	/^#define hash_table_get_key(/;"	d
hash_table_get_val	src/hash_table.h	/^#define hash_table_get_val(/;"	d
hash_table_insert	src/hash_table.h	/^#define hash_table_insert(/;"	d
hash_table_len	src/hash_table.h	/^#define hash_table_len(/;"	d
hash_table_make	src/hash_table.h	/^#define hash_table_make(/;"	d
hash_table_make_e	src/hash_table.h	/^#define hash_table_make_e(/;"	d
hash_table_pretty_name	src/hash_table.h	/^#define hash_table_pretty_name(/;"	d
hash_table_slot	src/hash_table.h	/^#define hash_table_slot(/;"	d
hash_table_traverse	src/hash_table.h	/^#define hash_table_traverse(/;"	d
head	src/memory.h	/^    bump_alloc_block_t *head;$/;"	m	struct:__anon7
head	src/threadpool.h	/^    tp_task_t    *head, *tail;$/;"	m	struct:__anon13
help	src/options.h	/^    int         help;$/;"	m	struct:__anon8
ht_prime_sizes	src/hash_table.h	/^static uint64_t ht_prime_sizes[] = {$/;"	v
i16	src/internal.h	/^#define i16 /;"	d
i32	src/internal.h	/^#define i32 /;"	d
i64	src/internal.h	/^#define i64 /;"	d
i8	src/internal.h	/^#define i8 /;"	d
id	src/tls.h	/^    u64           id;$/;"	m	struct:__anon16
in_proc	src/scope.h	/^    int           in_proc;$/;"	m	struct:scope
init_file_table	src/file.c	/^void init_file_table(void) {$/;"	f
init_mem	src/memory.c	/^void init_mem(void) {$/;"	f
init_strings	src/strings.c	/^void init_strings(void) {$/;"	f
init_tls	src/tls.c	/^void init_tls(void) {$/;"	f
init_tls_data	src/tls.c	/^static void init_tls_data(tls_t *tls) {$/;"	f	file:
init_types	src/type.c	/^int init_types(void) {$/;"	f
init_ui	src/ui.c	/^void init_ui(void) {$/;"	f
input_files	src/options.h	/^    array_t     input_files;$/;"	m	struct:__anon8
insert_new_type	src/type.c	/^static u32 insert_new_type(type_t t) {$/;"	f	file:
is_initialized	src/tls.h	/^    int          is_initialized;$/;"	m	struct:__anon15
is_kwd	src/strings.c	/^int is_kwd(string_id id) {$/;"	f
is_valid	src/tls.h	/^    int           is_valid;$/;"	m	struct:__anon16
key	src/tls.h	/^    pthread_key_t key;$/;"	m	struct:__anon16
kind	src/ast.h	/^    u8          kind;$/;"	m	struct:__anon3
kind	src/scope.h	/^    int           kind;$/;"	m	struct:scope
kind	src/type.h	/^    u32 kind;$/;"	m	struct:type
kwd_ids	src/strings.c	/^static array_t          kwd_ids;$/;"	v	file:
len	src/file.h	/^    u64        len;$/;"	m	struct:__anon5
len	src/threadpool.h	/^    unsigned int  len;$/;"	m	struct:__anon13
len	src/type.h	/^            u32 len;$/;"	m	struct:type::__anon18::__anon19
likely	src/internal.h	/^#define likely(/;"	d
line	src/src_range.h	/^    u32        line;$/;"	m	struct:__anon11
lines_mtx	src/globals.c	/^pthread_mutex_t  lines_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
loc	src/ast.h	/^    src_range_t loc;$/;"	m	struct:__anon3
local_tls	src/tls.c	/^static __thread tls_t local_tls;$/;"	v	file:
local_tls_entry	src/tls.c	/^static __thread tls_entry_t *local_tls_entry;$/;"	v	file:
lookahead_binary_op	src/parse.c	/^static int lookahead_binary_op(parse_context_t *cxt) {$/;"	f	file:
lookahead_unary_prefix_op	src/parse.c	/^static int lookahead_unary_prefix_op(parse_context_t *cxt) {$/;"	f	file:
main	src/simon.c	/^int main(int argc, char **argv) {$/;"	f
malloc	src/memory.h	/^#define malloc /;"	d
map_file_into_readonly_memory	src/file.c	/^int map_file_into_readonly_memory(const char *path, file_t *file) {$/;"	f
measure_time_now_ms	src/internal.c	/^u64 measure_time_now_ms(void) {$/;"	f
measure_time_now_us	src/internal.c	/^u64 measure_time_now_us(void) {$/;"	f
mem_alloc	src/memory.c	/^void * mem_alloc(size_t n_bytes)                { return malloc(n_bytes);        }$/;"	f
mem_alloc	src/memory.c	/^void * mem_alloc(size_t n_bytes) {$/;"	f
mem_calloc	src/memory.c	/^void * mem_calloc(size_t count, size_t n_bytes) { return calloc(count, n_bytes); }$/;"	f
mem_calloc	src/memory.c	/^void * mem_calloc(size_t count, size_t n_bytes) {$/;"	f
mem_free	src/memory.c	/^void   mem_free(void *addr)                     { free(addr);                    }$/;"	f
mem_free	src/memory.c	/^void mem_free(void *addr) { }$/;"	f
move_subscope	src/scope.c	/^scope_t *move_subscope(scope_t *dst, scope_t *subscope) {$/;"	f
multiple_entry_error	src/parse.c	/^void multiple_entry_error(ast_assign_t *new, ast_assign_t *old) {$/;"	f
mutex	src/threadpool.h	/^    pthread_mutex_t  mutex;$/;"	m	struct:__anon14
n_blank_lines	src/globals.c	/^u64              n_blank_lines;$/;"	v
n_blank_lines	src/parse.c	/^    u64           n_blank_lines;$/;"	m	struct:__anon9	file:
n_digits	src/ui.c	/^static int n_digits(u64 num) {$/;"	f	file:
n_lines	src/globals.c	/^u64              n_lines;$/;"	v
n_lines	src/parse.c	/^    u64           n_lines;$/;"	m	struct:__anon9	file:
n_running	src/threadpool.h	/^    int              n_running;$/;"	m	struct:__anon14
n_started	src/threadpool.h	/^    int              n_started;$/;"	m	struct:__anon14
n_threads	src/options.h	/^    int         n_threads;$/;"	m	struct:__anon8
name	src/ast.h	/^    string_id  name;$/;"	m	struct:__anon4
name_id	src/scope.h	/^    string_id     name_id;$/;"	m	struct:scope
name_id	src/type.h	/^        string_id name_id;$/;"	m	union:type::__anon18
next	src/threadpool.h	/^    struct tp_task *prev, *next;$/;"	m	struct:tp_task	typeref:struct:tp_task::
next_power_of_2	src/internal.c	/^u64 next_power_of_2(u64 x) {$/;"	f
node	src/scope.h	/^    ast_t        *node;$/;"	m	struct:scope
nodes	src/scope.h	/^    array_t       nodes;$/;"	m	struct:scope
num_threads	src/tls.c	/^static u32                   num_threads;$/;"	v	file:
op_arity_table	src/parse.c	/^int op_arity_table[] = {$/;"	v
op_assoc_table	src/parse.c	/^int op_assoc_table[] = {$/;"	v
op_prec_table	src/parse.c	/^u32 op_prec_table[] = {$/;"	v
op_str_table	src/parse.c	/^const char * op_str_table[] = {$/;"	v
options	src/options.c	/^options_t options;$/;"	v
options_t	src/options.h	/^} options_t;$/;"	t	typeref:struct:__anon8
output_is_tty	src/ui.c	/^static int output_is_tty;$/;"	v	file:
output_mtx	src/ui.c	/^static pthread_mutex_t output_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
output_name	src/options.h	/^    const char *output_name;$/;"	m	struct:__anon8
parent	src/scope.h	/^    struct scope *parent;$/;"	m	struct:scope	typeref:struct:scope::scope
parse	src/parse.c	/^static void parse(parse_context_t *cxt) {$/;"	f	file:
parse_arg_list	src/parse.c	/^static ast_t * parse_arg_list(parse_context_t *cxt) {$/;"	f	file:
parse_assign	src/parse.c	/^static ast_t * parse_assign(parse_context_t *cxt) {$/;"	f	file:
parse_block	src/parse.c	/^static ast_t * parse_block(parse_context_t *cxt) {$/;"	f	file:
parse_break	src/parse.c	/^static ast_t *parse_break(parse_context_t *cxt) {$/;"	f	file:
parse_char	src/parse.c	/^static int parse_char(parse_context_t *cxt, char c) {$/;"	f	file:
parse_context_t	src/parse.c	/^} parse_context_t;$/;"	t	typeref:struct:__anon9	file:
parse_continue	src/parse.c	/^static ast_t *parse_continue(parse_context_t *cxt) {$/;"	f	file:
parse_defer	src/parse.c	/^static ast_t *parse_defer(parse_context_t *cxt) {$/;"	f	file:
parse_expr	src/parse.c	/^static ast_t * parse_expr(parse_context_t *cxt) {$/;"	f	file:
parse_expr_more	src/parse.c	/^static ast_t * parse_expr_more(parse_context_t *cxt, ast_t *left, int min_prec) {$/;"	f	file:
parse_expr_prec	src/parse.c	/^static ast_t * parse_expr_prec(parse_context_t *cxt, int min_prec) {$/;"	f	file:
parse_file	src/parse.c	/^void parse_file(const char *path) {$/;"	f
parse_file_thread	src/parse.c	/^static void parse_file_thread(void *_path) {$/;"	f	file:
parse_identifier	src/parse.c	/^static int parse_identifier(parse_context_t *cxt, string_id *string_out) {$/;"	f	file:
parse_identifier_assign	src/parse.c	/^static int parse_identifier_assign(parse_context_t *cxt) {$/;"	f	file:
parse_if	src/parse.c	/^static ast_t * parse_if(parse_context_t *cxt) {$/;"	f	file:
parse_int	src/parse.c	/^static int parse_int(parse_context_t *cxt, string_id *string_out) {$/;"	f	file:
parse_leaf_expr	src/parse.c	/^static ast_t * parse_leaf_expr(parse_context_t *cxt) {$/;"	f	file:
parse_literal	src/parse.c	/^static int parse_literal(parse_context_t *cxt, const char *lit) {$/;"	f	file:
parse_loop	src/parse.c	/^static ast_t * parse_loop(parse_context_t *cxt) {$/;"	f	file:
parse_module_body	src/parse.c	/^static ast_t * parse_module_body(parse_context_t *cxt, string_id name) {$/;"	f	file:
parse_operand	src/parse.c	/^static ast_t * parse_operand(parse_context_t *cxt) {$/;"	f	file:
parse_options	src/options.c	/^int parse_options(int argc, char **argv) {$/;"	f
parse_proc_body	src/parse.c	/^static ast_t * parse_proc_body(parse_context_t *cxt, string_id name, int do_parse_block) {$/;"	f	file:
parse_return	src/parse.c	/^static ast_t *parse_return(parse_context_t *cxt) {$/;"	f	file:
parse_static_directive	src/parse.c	/^static ast_t * parse_static_directive(parse_context_t *cxt) {$/;"	f	file:
parse_stmt	src/parse.c	/^static ast_t *parse_stmt(parse_context_t *cxt) {$/;"	f	file:
parse_string_literal	src/parse.c	/^static int parse_string_literal(parse_context_t *cxt, string_id *string_out) {$/;"	f	file:
parse_struct_body	src/parse.c	/^static ast_t * parse_struct_body(parse_context_t *cxt, string_id name) {$/;"	f	file:
parse_word	src/parse.c	/^static int parse_word(parse_context_t *cxt, const char *word) {$/;"	f	file:
path_id	src/file.h	/^    string_id  path_id;$/;"	m	struct:__anon5
path_id	src/src_range.h	/^    string_id  path_id;$/;"	m	struct:__anon11
platform_get_num_hw_threads	src/platform.c	/^u32 platform_get_num_hw_threads(void) {$/;"	f
pre_clean_point	src/parse.c	/^    src_point_t   pre_clean_point;$/;"	m	struct:__anon9	file:
pretty_bytes	src/internal.c	/^char * pretty_bytes(u64 n_bytes) {$/;"	f
pretty_bytes_buff	src/internal.c	/^static __thread char pretty_bytes_buff[64];$/;"	v	file:
prev	src/memory.h	/^    struct bump_alloc_block *prev;$/;"	m	struct:bump_alloc_block	typeref:struct:bump_alloc_block::bump_alloc_block
prev	src/threadpool.h	/^    struct tp_task *prev, *next;$/;"	m	struct:tp_task	typeref:struct:tp_task::tp_task
print_all_strings	src/strings.c	/^void print_all_strings(void) {$/;"	f
print_range	src/ui.c	/^static void print_range(src_range_t *range, const char *all_color, const char *range_color) {$/;"	f	file:
print_usage	src/options.c	/^void print_usage(void) {$/;"	f
program_entry	src/globals.c	/^ast_assign_t    *program_entry;$/;"	v
program_entry	src/parse.c	/^    ast_assign_t *program_entry;$/;"	m	struct:__anon9	file:
program_entry_mtx	src/globals.c	/^pthread_mutex_t  program_entry_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
queue	src/threadpool.h	/^    tp_queue_t       queue;$/;"	m	struct:__anon14
realloc	src/memory.h	/^#define realloc /;"	d
redecl_error	src/ast.c	/^static void redecl_error(string_id name, ast_t *bad, ast_t *existing) {$/;"	f	file:
ref_count	src/tls.h	/^    u32           ref_count;$/;"	m	struct:__anon16
report_file_err	src/ui.c	/^void report_file_err(file_t *file, int err) {$/;"	f
report_loc_err	src/ui.h	/^#define report_loc_err(/;"	d
report_loc_err_no_exit	src/ui.h	/^#define report_loc_err_no_exit(/;"	d
report_loc_info	src/ui.h	/^#define report_loc_info(/;"	d
report_loc_info_no_exit	src/ui.h	/^#define report_loc_info_no_exit(/;"	d
report_range_err	src/ui.h	/^#define report_range_err(/;"	d
report_range_err_no_exit	src/ui.h	/^#define report_range_err_no_exit(/;"	d
report_range_info	src/ui.h	/^#define report_range_info(/;"	d
report_range_info_no_exit	src/ui.h	/^#define report_range_info_no_exit(/;"	d
report_vague_err	src/ui.c	/^void report_vague_err(const char *fmt, ...) {$/;"	f
roots	src/globals.c	/^array_t          roots;$/;"	v
roots_mtx	src/globals.c	/^pthread_mutex_t  roots_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
scope	src/scope.h	/^typedef struct scope {$/;"	s
scope_find_origins	src/scope.c	/^static void scope_find_origins(scope_t *scope) {$/;"	f	file:
scope_find_origins_thread	src/scope.c	/^static void scope_find_origins_thread(void *arg) { scope_find_origins((scope_t*)arg); }$/;"	f	file:
scope_stack	src/parse.c	/^    array_t       scope_stack;$/;"	m	struct:__anon9	file:
scope_t	src/ast.h	/^typedef struct scope scope_t;$/;"	t	typeref:struct:scope
scope_t	src/scope.h	/^} scope_t;$/;"	t	typeref:struct:scope
scopes_find_origins	src/scope.c	/^void scopes_find_origins(scope_t *scope) {$/;"	f
search_up_scopes	src/scope.c	/^ast_t *search_up_scopes(scope_t *scope, string_id name_id) {$/;"	f
search_up_scopes_return_scope	src/scope.c	/^ast_t *search_up_scopes_return_scope(scope_t *scope, string_id name_id, scope_t **out_scope) {$/;"	f
search_up_scopes_stop_at_module	src/scope.c	/^ast_t *search_up_scopes_stop_at_module(scope_t *scope, string_id name_id) {$/;"	f
search_up_scopes_stop_at_module_return_scope	src/scope.c	/^ast_t *search_up_scopes_stop_at_module_return_scope(scope_t *scope, string_id name_id, scope_t **out_scope) {$/;"	f
setup_cxt	src/parse.c	/^static void setup_cxt(parse_context_t *cxt) {$/;"	f	file:
should_free	src/array.h	/^    int   should_free;$/;"	m	struct:__anon1
show_scope	src/scope.c	/^void show_scope(scope_t *scope) {$/;"	f
simon_assert_fail	src/internal.c	/^void simon_assert_fail(const char *msg, const char *fname, int line, const char *cond_str) {$/;"	f
src_point_t	src/src_range.h	/^} src_point_t;$/;"	t	typeref:struct:__anon11
src_range_t	src/src_range.h	/^} src_range_t;$/;"	t	typeref:struct:__anon12
start_parsing_file_async	src/parse.c	/^void start_parsing_file_async(const char *path) {$/;"	f
static_comment	src/ast.h	/^AST_DEFINE(static_comment);$/;"	v
static_else	src/ast.h	/^AST_DEFINE(static_else);$/;"	v
static_endif	src/ast.h	/^AST_DEFINE(static_endif);$/;"	v
stop_mode	src/threadpool.h	/^    int              stop_mode;$/;"	m	struct:__anon14
str_equ	src/hash_utilities.c	/^int str_equ(const char *a, const char *b) { return strcmp(a, b) == 0; }$/;"	f
str_hash	src/hash_utilities.c	/^u64 str_hash(const char *s) {$/;"	f
str_id_hash	src/hash_utilities.c	/^u64 str_id_hash(string_id id) {$/;"	f
string_id	src/strings.h	/^typedef u64         string_id;$/;"	t
string_t	src/strings.h	/^typedef const char *string_t;$/;"	t
string_table_lock	src/strings.c	/^static pthread_rwlock_t string_table_lock = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	file:
subscopes	src/scope.h	/^    array_t       subscopes;$/;"	m	struct:scope
symbols	src/scope.h	/^    array_t       symbols;$/;"	m	struct:scope
tail	src/threadpool.h	/^    tp_task_t    *head, *tail;$/;"	m	struct:__anon13
threads	src/threadpool.h	/^    pthread_t       *threads;$/;"	m	struct:__anon14
tls	src/parse.c	/^    tls_t        *tls;$/;"	m	struct:__anon9	file:
tls	src/tls.h	/^    tls_t         tls;$/;"	m	struct:__anon16
tls_entry_array	src/tls.c	/^static tls_entry_t           tls_entry_array[MAX_NUM_TLS];$/;"	v	file:
tls_entry_array_lock	src/tls.c	/^static pthread_mutex_t       tls_entry_array_lock;$/;"	v	file:
tls_entry_t	src/tls.h	/^} tls_entry_t;$/;"	t	typeref:struct:__anon16
tls_t	src/tls.h	/^} tls_t;$/;"	t	typeref:struct:__anon15
top_level_nodes	src/parse.c	/^    array_t       top_level_nodes;$/;"	m	struct:__anon9	file:
tp	src/globals.c	/^tp_t            *tp;$/;"	v
tp_add_task	src/threadpool.h	/^void tp_add_task(tp_t *tp, tp_task_fn_t fn, void *arg) {$/;"	f
tp_free	src/threadpool.h	/^void tp_free(tp_t *tp) {$/;"	f
tp_make	src/threadpool.h	/^tp_t * tp_make(int n_workers) {$/;"	f
tp_queue_clear	src/threadpool.h	/^static void tp_queue_clear(tp_queue_t *queue) {$/;"	f
tp_queue_de	src/threadpool.h	/^static tp_task_t * tp_queue_de(tp_queue_t *queue) {$/;"	f
tp_queue_en	src/threadpool.h	/^static void tp_queue_en(tp_queue_t *queue, tp_task_fn_t fn, void *arg) {$/;"	f
tp_queue_make	src/threadpool.h	/^static tp_queue_t tp_queue_make(void) {$/;"	f
tp_queue_t	src/threadpool.h	/^} tp_queue_t;$/;"	t	typeref:struct:__anon13
tp_running	src/threadpool.h	/^int tp_running(tp_t *tp) {$/;"	f
tp_stop	src/threadpool.h	/^void tp_stop(tp_t *tp, int stop_mode) {$/;"	f
tp_t	src/threadpool.h	/^} tp_t;$/;"	t	typeref:struct:__anon14
tp_task	src/threadpool.h	/^typedef struct tp_task {$/;"	s
tp_task_fn_t	src/threadpool.h	/^typedef void   (*tp_task_fn_t)  (void*);$/;"	t
tp_task_free	src/threadpool.h	/^static void tp_task_free(tp_task_t *task) { free(task); }$/;"	f
tp_task_make	src/threadpool.h	/^static tp_task_t * tp_task_make(tp_task_fn_t fn, void *arg) {$/;"	f
tp_task_t	src/threadpool.h	/^} tp_task_t;$/;"	t	typeref:struct:tp_task
tp_thread_fn_t	src/threadpool.h	/^typedef void * (*tp_thread_fn_t)(void*);$/;"	t
tp_wait	src/threadpool.h	/^void tp_wait(tp_t *tp) {$/;"	f
tree	src/tree.h	/^#define tree(/;"	d
tree_begin	src/tree.h	/^#define tree_begin(/;"	d
tree_delete	src/tree.h	/^#define tree_delete(/;"	d
tree_free	src/tree.h	/^#define tree_free(/;"	d
tree_geq	src/tree.h	/^#define tree_geq(/;"	d
tree_gtr	src/tree.h	/^#define tree_gtr(/;"	d
tree_insert	src/tree.h	/^#define tree_insert(/;"	d
tree_it	src/tree.h	/^#define tree_it(/;"	d
tree_it_equ	src/tree.h	/^#define tree_it_equ(/;"	d
tree_it_good	src/tree.h	/^#define tree_it_good(/;"	d
tree_it_key	src/tree.h	/^#define tree_it_key(/;"	d
tree_it_next	src/tree.h	/^#define tree_it_next(/;"	d
tree_it_prev	src/tree.h	/^#define tree_it_prev(/;"	d
tree_it_val	src/tree.h	/^#define tree_it_val(/;"	d
tree_last	src/tree.h	/^#define tree_last(/;"	d
tree_len	src/tree.h	/^#define tree_len(/;"	d
tree_lookup	src/tree.h	/^#define tree_lookup(/;"	d
tree_make	src/tree.h	/^#define tree_make(/;"	d
tree_node	src/tree.h	/^#define tree_node(/;"	d
tree_pretty_name	src/tree.h	/^#define tree_pretty_name(/;"	d
tree_traverse	src/tree.h	/^#define tree_traverse(/;"	d
type	src/ast.h	/^    u32         type;$/;"	m	struct:__anon3
type	src/type.h	/^typedef struct type {$/;"	s
type_has_compile_time_only_values	src/type.c	/^int type_has_compile_time_only_values(u32 ty) {$/;"	f
type_kind_has_under	src/type.c	/^static int type_kind_has_under(u32 kind) {$/;"	f	file:
type_t	src/type.h	/^} type_t;$/;"	t	typeref:struct:type
type_table	src/type.c	/^static array_t type_table;$/;"	v	file:
typecheck_assign	src/ast.c	/^static void typecheck_assign(ast_assign_t *assign, ast_t *origin, scope_t *scope) {$/;"	f	file:
u16	src/internal.h	/^#define u16 /;"	d
u32	src/internal.h	/^#define u32 /;"	d
u64	src/internal.h	/^#define u64 /;"	d
u8	src/internal.h	/^#define u8 /;"	d
undeclared_error	src/ast.c	/^static void undeclared_error(string_id name, ast_t *node) {$/;"	f	file:
under_id	src/type.h	/^            u32 under_id;$/;"	m	struct:type::__anon18::__anon19
unlikely	src/internal.h	/^#define unlikely(/;"	d
use_hash_table	src/hash_table.h	/^#define use_hash_table(/;"	d
use_tree	src/tree.h	/^#define use_tree(/;"	d
use_tree_c	src/tree.h	/^#define use_tree_c(/;"	d
use_tree_ptr_c	src/tree.h	/^#define use_tree_ptr_c(/;"	d
used	src/array.h	/^    int   used;$/;"	m	struct:__anon1
validate_range	src/src_range.c	/^void validate_range(src_range_t *range) {$/;"	f
verb_message	src/ui.c	/^void verb_message(const char *fmt, ...) {$/;"	f
verbose	src/options.h	/^    int         verbose;$/;"	m	struct:__anon8
visited	src/scope.h	/^    int           visited;$/;"	m	struct:scope
wait_for_parsing_async	src/parse.c	/^void wait_for_parsing_async(void) { tp_wait(tp); }$/;"	f
