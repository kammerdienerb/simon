# basic.si

NULL :: cast(*u8, 0);

SUCCESS       ::  0;
ERR_TOO_SMALL :: -1;
ERR_BAD_ALLOC :: -2;

Allocator :: module {
    Bundle :: struct {
        self:    *u8;
        alloc:   proc(*u8, u64): *u8;
        realloc: proc(*u8, *u8, u64): *u8;
        free:    proc(*u8, *u8);
    }

    bundle_alloc :: proc(bundle: *Bundle, n_bytes: u64): *u8 {
        return bundle.alloc(bundle.self, n_bytes);
    }

    bundle_realloc :: proc(bundle: *Bundle, ptr: *u8, n_bytes: u64): *u8 {
        return bundle.realloc(bundle.self, ptr, n_bytes);
    }

    bundle_free :: proc(bundle: *Bundle, ptr: *u8) {
        bundle.free(bundle.self, ptr);
    }

    alloc   :: proc(allocator: *%allocator_type, n_bytes: u64): *u8           { compile_error!("allocator does not implement alloc()");   }
    realloc :: proc(allocator: *%allocator_type, ptr: *u8, n_bytes: u64): *u8 { compile_error!("allocator does not implement realloc()"); }
    free    :: proc(allocator: *%allocator_type, ptr: *u8)                    { compile_error!("allocator does not implement free()");    }
    bundle  :: proc(allocator: *%allocator_type): Bundle                      { compile_error!("allocator does not implement bundle()");  }
}

Heap_Allocator :: struct {}

[[ specialization(Allocator.alloc) ]]
heap_alloc :: proc(allocator: *Heap_Allocator, n_bytes: u64): *u8 { return NULL; }

[[ specialization(Allocator.free) ]]
heap_free :: proc(allocator: *Heap_Allocator, ptr: *u8) {  }

Fixed_Allocator :: struct {
    base: *u8;
    end:  *u8;
}

fixed_allocator_new :: proc(buff: *u8, size: u64): Fixed_Allocator {
    ret: Fixed_Allocator;

    ret.base = buff;
    ret.end  = buff + size;

    return ret;
}

[[ specialization(Allocator.alloc) ]]
fixed_alloc :: proc(allocator: *Fixed_Allocator, n_bytes: u64): *u8 {
    # @todo: alignment

    if allocator.base + n_bytes > allocator.end { return NULL; }

    ret := allocator.base;

    allocator.base += n_bytes;

    return ret;
}

[[ specialization(Allocator.free) ]]
fixed_free :: proc(allocator: *Fixed_Allocator, ptr: *u8) {  }

Singleton_Allocator :: struct {
    base: *u8;
    end:  *u8;
}

singleton_allocator_new :: proc(buff: *u8, size: u64): Singleton_Allocator {
    ret: Singleton_Allocator;

    ret.base = buff;
    ret.end  = buff + size;

    return ret;
}

[[ specialization(Allocator.alloc) ]]
singleton_alloc :: proc(allocator: *Singleton_Allocator, n_bytes: u64): *u8 {
    # @todo: alignment

    if allocator.base + n_bytes > allocator.end { return NULL; }

    return allocator.base;
}

[[ specialization(Allocator.realloc) ]]
singleton_realloc :: proc(allocator: *Singleton_Allocator, ptr: *u8, n_bytes: u64): *u8 {
    # @todo: alignment

    if ptr != NULL and ptr != allocator.base    { return NULL; }
    if allocator.base + n_bytes > allocator.end { return NULL; }

    return allocator.base;
}

[[ specialization(Allocator.free) ]]
singleton_free :: proc(allocator: *Singleton_Allocator, ptr: *u8) {  }

[[ specialization(Allocator.bundle) ]]
singleton_bundle :: proc(allocator: *Singleton_Allocator): Allocator.Bundle {
    ret: Allocator.Bundle;
    ret.self    = cast(*u8, allocator);
    ret.alloc   = cast(proc(*u8, u64): *u8,      singleton_alloc);
    ret.realloc = cast(proc(*u8, *u8, u64): *u8, singleton_realloc);
    ret.free    = cast(proc(*u8, *u8),           singleton_free);
    return ret;
}



[[ extern ]] open  :: proc(path: *u8, oflag: s32): s32;
[[ extern ]] read  :: proc(fd: s32, bytes: *u8, len: u64): s32;
[[ extern ]] write :: proc(fd: s32, bytes: *u8, len: u64): s32;
[[ extern ]] close :: proc(fd: s32): s32;
[[ extern ]] exit  :: proc(code: s64);

write_string :: proc(s: [u8]) {
    write(1, *s[0], lenof s);
}



String_Builder :: struct {
    allocator:  Allocator.Bundle;
    data:      *u8;
    cursor:    *u8;
    len:        u64;
}

string_builder_reset :: proc(sb: *String_Builder) {
    sb.data   = NULL;
    sb.cursor = NULL;
    sb.len    = 0;
}

string_builder_new :: proc(allocator: *%allocator_type): String_Builder {
    ret: String_Builder;
    string_builder_reset(*ret);
    ret.allocator = Allocator.bundle(allocator);
    return ret;
}

string_builder_free :: proc(sb: *String_Builder) {
    if sb.data != NULL {
        Allocator.bundle_free(*sb.allocator, sb.data);
    }
    string_builder_reset(sb);
}

string_builder_append :: proc(sb: *String_Builder, c: u8): s64 {
    was_null := sb.data == NULL;

    sb.data = Allocator.bundle_realloc(*sb.allocator, sb.data, sb.len + 1);

    if was_null {
        sb.cursor = sb.data;
    }

    if sb.data == NULL {
        string_builder_reset(sb);
        return ERR_BAD_ALLOC;
    }

    sb.len     += 1;
    @sb.cursor  = c;
    sb.cursor  += 1;

    return SUCCESS;
}

string_builder_get :: proc(sb: *String_Builder): [u8] {
    return _builtin_slice_from(sb.data, sb.len);
}

Format :: module {
    JUST_LEFT   :: 0;
    JUST_RIGHT  :: 1;
    JUST_CENTER :: 2;

    HEX_LOWER   :: 1;
    HEX_UPPER   :: 2;


    [[ bitfield_struct(u64) ]]
    Format_Info :: struct {
        [[ bitfield( 0, 31) ]] width:     u32;
        [[ bitfield(32, 33) ]] just:      u8;
        [[ bitfield(34, 35) ]] hex:       u8;
        [[ bitfield(36, 49) ]] float_int: u32;
        [[ bitfield(50, 63) ]] float_rat: u32;
    }


    to_formatted_str :: proc(sb: *String_Builder, arg: %T, f: Format_Info): s64 {
        compile_error!("no specialization provided for type T");
    }

    [[ specialization(to_formatted_str) ]]
    u64_to_formatted_str :: proc(sb: *String_Builder, arg: u64, f: Format.Format_Info): s64 {
        buff: [u8];
        len: u64 = 1;
        save_arg := arg;

        if f.hex {
            digits := "0123456789abcdef";
            if f.hex == HEX_UPPER {
                digits = "0123456789ABCDEF";
            }

            loop ; arg >= 16; arg = arg >> 4 { len += 1; }
            arg = save_arg;

            idx  := len - 1;
            buff  = _builtin_slice_from(_builtin_stack_alloc(len), len);
            loop ; arg >= 16; arg = arg >> 4 {
                buff[idx]  = digits[arg & 0xF];
                idx       -= 1;
            }
            buff[idx]  = digits[arg & 0xF];
        } else {
            loop ; arg >= 10; arg /= 10 { len += 1; }
            arg = save_arg;

            idx  := len - 1;
            buff  = _builtin_slice_from(_builtin_stack_alloc(len), len);
            loop ; arg >= 10; arg /= 10 {
                buff[idx]  = '0' + (arg % 10);
                idx       -= 1;
            }
            buff[idx] = '0' + (arg % 10);
        }

        loop idx : u64 = 0; idx < len; idx += 1 {
            err := string_builder_append(sb, buff[idx]);
            if err { return err; }
        }

        return SUCCESS;
    }

    [[ specialization(to_formatted_str) ]]
    u32_to_formatted_str :: proc(sb: *String_Builder, arg: u32, f: Format.Format_Info): s64 {
        return u64_to_formatted_str(sb, cast(u64, arg), f);
    }
    [[ specialization(to_formatted_str) ]]
    u16_to_formatted_str :: proc(sb: *String_Builder, arg: u16, f: Format.Format_Info): s64 {
        return u64_to_formatted_str(sb, cast(u64, arg), f);
    }
    [[ specialization(to_formatted_str) ]]
    u8_to_formatted_str :: proc(sb: *String_Builder, arg: u8, f: Format.Format_Info): s64 {
        return u64_to_formatted_str(sb, cast(u64, arg), f);
    }

    [[ specialization(to_formatted_str) ]]
    s64_to_formatted_str :: proc(sb: *String_Builder, arg: s64, f: Format.Format_Info): s64 {
        if f.hex { return u64_to_formatted_str(sb, cast(u64, arg), f); }

        len  : u64 = 1;
        neg  := 0;

        if arg < 0 {
            len += 1;
            neg  = 1;
            arg  = -arg;
        }

        save_arg := arg;

        loop ; arg >= 10; arg /= 10 { len += 1; }

        arg  = save_arg;

        idx  := len - 1;
        buff := _builtin_slice_from(_builtin_stack_alloc(len), len);
        loop ; arg >= 10; arg /= 10 {
            buff[idx]  = '0' + (arg % 10);
            idx       -= 1;
        }
        buff[idx]  = '0' + (arg % 10);
        idx       -= 1;

        if neg {
            buff[idx]  = '-';
        }

        idx = 0;
        loop ; idx < len; idx += 1 {
            err := string_builder_append(sb, buff[idx]);
            if err { return err; }
        }

        return SUCCESS;
    }

    [[ specialization(to_formatted_str) ]]
    s32_to_formatted_str :: proc(sb: *String_Builder, arg: s32, f: Format.Format_Info): s64 {
        return s64_to_formatted_str(sb, cast(s64, arg), f);
    }
    [[ specialization(to_formatted_str) ]]
    s16_to_formatted_str :: proc(sb: *String_Builder, arg: s16, f: Format.Format_Info): s64 {
        return s64_to_formatted_str(sb, cast(s64, arg), f);
    }
    [[ specialization(to_formatted_str) ]]
    s8_to_formatted_str :: proc(sb: *String_Builder, arg: s8, f: Format.Format_Info): s64 {
        return s64_to_formatted_str(sb, cast(s64, arg), f);
    }

    [[ specialization(to_formatted_str) ]]
    ptr_to_formatted_str :: proc(sb: *String_Builder, arg: *u8, f: Format.Format_Info): s64 {
        if not f.hex {
            f.hex = HEX_UPPER;
        }

        string_builder_append(sb, '0');
        string_builder_append(sb, 'x');

        err := to_formatted_str(sb, cast(u64, arg), f);

        return err;
    }

    [[ specialization(to_formatted_str) ]]
    str_to_formatted_str :: proc(sb: *String_Builder, arg: [u8], f: Format.Format_Info): s64 {
        arg_len := lenof arg;

        loop i: u64 = 0; i < arg_len; i += 1 {
            err := string_builder_append(sb, arg[i]);
            if err { return err; }
        }

        return SUCCESS;
    }

    # [[ specialization(to_formatted_str) ]]
    # f64_to_formatted_str :: proc(buff: *u8, len: *u64, arg: f64, f: Format.Format_Info): s64 {
    #     return ERR_TOO_SMALL;
    # }

    _sbfmt :: proc(sb: *String_Builder, fmt: [u8], args: %...): s64 {
        fmt_len   := lenof fmt;
        which_arg := 0;

        loop i: u64 = 0; i < fmt_len; i += 1 {
            if fmt[i] == '{' {
                info: Format_Info = 0;

                loop ; i < fmt_len and fmt[i] != '}'; i += 1 {
                    if      fmt[i] == 'x' { info.hex = HEX_LOWER; }
                    else if fmt[i] == 'X' { info.hex = HEX_UPPER; }
                    # parse formatting stuff
                }

                a := 0;
                vargs![] {
                    if a == which_arg {
                        err := to_formatted_str(sb, _builtin_varg(), info);
                        if err { return err; }

                        write_string(string_builder_get(sb));
                        string_builder_reset(sb);
                    }
                    a += 1;
                }

                which_arg += 1;
            } else {
                write_string(_builtin_slice_from(*fmt[i], 1));
            }
        }

        return SUCCESS;
    }

    _fmt :: proc(allocator: *%allocator_type, fmt: [u8], args: %...): s64 {
        sb := string_builder_new(allocator);
        defer { string_builder_free(*sb); }

        return _sbfmt(*sb, fmt, args);

    }
}

aprintf :: proc(allocator: *%allocator_type, fmt: [u8], args: %...): s64 {
    return Format._fmt(allocator, fmt, args);
}

printf :: proc(fmt: [u8], args: %...): s64 {
    N: u64 = 4096;
    mem := singleton_allocator_new(_builtin_stack_alloc(N), N);
    return aprintf(*mem, fmt, args);
}
